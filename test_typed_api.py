#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
ÂàÜÁ±ªÂûãÈ™åËØÅÁ†ÅAPIÊµãËØïÂ∑•ÂÖ∑
ÊµãËØïÂêÑÁßçÈ™åËØÅÁ†ÅÁ±ªÂûãÁöÑ‰∏ìÈó®Êé•Âè£
"""

import requests
import json
import time
import base64
import os
from typing import Dict, Any


class TypedAPITester:
    """ÂàÜÁ±ªÂûãAPIÊµãËØïÂô®"""
    
    def __init__(self, base_url: str = "http://localhost:5000"):
        """ÂàùÂßãÂåñÊµãËØïÂô®"""
        self.base_url = base_url
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'TypedCaptchaAPI-Tester/1.0'
        })
    
    def test_health(self) -> Dict[str, Any]:
        """ÊµãËØïÂÅ•Â∫∑Ê£ÄÊü•"""
        print("üîç ÊµãËØïÂÅ•Â∫∑Ê£ÄÊü•...")
        
        try:
            response = self.session.get(f"{self.base_url}/api/health", timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ ÂÅ•Â∫∑Ê£ÄÊü•ÊàêÂäü")
                print(f"   ÁâàÊú¨: {data.get('version')}")
                print(f"   ÊîØÊåÅÁ±ªÂûã: {len(data.get('supported_types', {}))}")
                print(f"   ËæìÂÖ•ÊñπÂºè: {', '.join(data.get('input_methods', []))}")
                return {"success": True, "data": data}
            else:
                print(f"‚ùå ÂÅ•Â∫∑Ê£ÄÊü•Â§±Ë¥•: HTTP {response.status_code}")
                return {"success": False, "error": f"HTTP {response.status_code}"}
                
        except Exception as e:
            print(f"‚ùå ÂÅ•Â∫∑Ê£ÄÊü•ÂºÇÂ∏∏: {str(e)}")
            return {"success": False, "error": str(e)}
    
    def test_digit_recognition(self) -> Dict[str, Any]:
        """ÊµãËØïÁ∫ØÊï∞Â≠óÈ™åËØÅÁ†ÅËØÜÂà´"""
        print("\nüî¢ ÊµãËØïÁ∫ØÊï∞Â≠óÈ™åËØÅÁ†ÅËØÜÂà´...")
        
        # ÊµãËØïÂ∑≤Áü•ÁöÑÊï∞Â≠óÈ™åËØÅÁ†Å
        test_files = [
            "ocr-main/ocr-main/examples/OIP-C.jpg",
            "ocr-main/ocr-main/examples/url_captcha.jpg"
        ]
        
        results = []
        
        for file_path in test_files:
            if os.path.exists(file_path):
                try:
                    # Êñá‰ª∂‰∏ä‰º†ÊµãËØï
                    with open(file_path, 'rb') as f:
                        files = {'file': f}
                        
                        start_time = time.time()
                        response = self.session.post(
                            f"{self.base_url}/api/digit/recognize/upload",
                            files=files,
                            timeout=60
                        )
                        request_time = round((time.time() - start_time) * 1000, 2)
                    
                    if response.status_code == 200:
                        data = response.json()
                        if data.get("success"):
                            print(f"   ‚úÖ {os.path.basename(file_path)}: '{data.get('result')}' ({request_time}ms)")
                            results.append({
                                "file": os.path.basename(file_path),
                                "result": data.get('result'),
                                "success": True
                            })
                        else:
                            print(f"   ‚ùå {os.path.basename(file_path)}: {data.get('error')}")
                            results.append({
                                "file": os.path.basename(file_path),
                                "error": data.get('error'),
                                "success": False
                            })
                    else:
                        print(f"   ‚ùå {os.path.basename(file_path)}: HTTP {response.status_code}")
                        results.append({
                            "file": os.path.basename(file_path),
                            "error": f"HTTP {response.status_code}",
                            "success": False
                        })
                        
                except Exception as e:
                    print(f"   ‚ùå {os.path.basename(file_path)}: {str(e)}")
                    results.append({
                        "file": os.path.basename(file_path),
                        "error": str(e),
                        "success": False
                    })
        
        return {"success": len(results) > 0, "results": results}
    
    def test_mixed_recognition(self) -> Dict[str, Any]:
        """ÊµãËØïÊï∞Â≠óÂ≠óÊØçÊ∑∑ÂêàÈ™åËØÅÁ†ÅËØÜÂà´"""
        print("\nüî§ ÊµãËØïÊï∞Â≠óÂ≠óÊØçÊ∑∑ÂêàÈ™åËØÅÁ†ÅËØÜÂà´...")
        
        # ÊµãËØïÂ∑≤Áü•ÁöÑÊ∑∑ÂêàÈ™åËØÅÁ†Å
        test_files = [
            "ocr-main/ocr-main/examples/image.png"
        ]
        
        results = []
        
        for file_path in test_files:
            if os.path.exists(file_path):
                try:
                    # Êñá‰ª∂‰∏ä‰º†ÊµãËØï
                    with open(file_path, 'rb') as f:
                        files = {'file': f}
                        
                        start_time = time.time()
                        response = self.session.post(
                            f"{self.base_url}/api/mixed/recognize/upload",
                            files=files,
                            timeout=60
                        )
                        request_time = round((time.time() - start_time) * 1000, 2)
                    
                    if response.status_code == 200:
                        data = response.json()
                        if data.get("success"):
                            print(f"   ‚úÖ {os.path.basename(file_path)}: '{data.get('result')}' ({request_time}ms)")
                            results.append({
                                "file": os.path.basename(file_path),
                                "result": data.get('result'),
                                "success": True
                            })
                        else:
                            print(f"   ‚ùå {os.path.basename(file_path)}: {data.get('error')}")
                            results.append({
                                "file": os.path.basename(file_path),
                                "error": data.get('error'),
                                "success": False
                            })
                    else:
                        print(f"   ‚ùå {os.path.basename(file_path)}: HTTP {response.status_code}")
                        results.append({
                            "file": os.path.basename(file_path),
                            "error": f"HTTP {response.status_code}",
                            "success": False
                        })
                        
                except Exception as e:
                    print(f"   ‚ùå {os.path.basename(file_path)}: {str(e)}")
                    results.append({
                        "file": os.path.basename(file_path),
                        "error": str(e),
                        "success": False
                    })
        
        return {"success": len(results) > 0, "results": results}
    
    def test_auto_recognition(self) -> Dict[str, Any]:
        """ÊµãËØïËá™Âä®Á±ªÂûãËØÜÂà´"""
        print("\nü§ñ ÊµãËØïËá™Âä®Á±ªÂûãËØÜÂà´...")
        
        # ÊµãËØïÊâÄÊúâÈ™åËØÅÁ†ÅÊñá‰ª∂
        test_files = [
            ("ocr-main/ocr-main/examples/image.png", "mixed_alphanumeric"),
            ("ocr-main/ocr-main/examples/OIP-C.jpg", "pure_digit"),
            ("ocr-main/ocr-main/examples/url_captcha.jpg", "pure_digit")
        ]
        
        results = []
        
        for file_path, expected_type in test_files:
            if os.path.exists(file_path):
                try:
                    # Êñá‰ª∂‰∏ä‰º†ÊµãËØï
                    with open(file_path, 'rb') as f:
                        files = {'file': f}
                        
                        start_time = time.time()
                        response = self.session.post(
                            f"{self.base_url}/api/auto/recognize/upload",
                            files=files,
                            timeout=60
                        )
                        request_time = round((time.time() - start_time) * 1000, 2)
                    
                    if response.status_code == 200:
                        data = response.json()
                        if data.get("success"):
                            result = data.get('result')
                            detected_type = data.get('captcha_type')
                            type_correct = detected_type == expected_type
                            
                            status = "‚úÖ" if type_correct else "‚ö†Ô∏è"
                            print(f"   {status} {os.path.basename(file_path)}: '{result}' -> {detected_type}")
                            
                            results.append({
                                "file": os.path.basename(file_path),
                                "result": result,
                                "detected_type": detected_type,
                                "expected_type": expected_type,
                                "type_correct": type_correct,
                                "success": True
                            })
                        else:
                            print(f"   ‚ùå {os.path.basename(file_path)}: {data.get('error')}")
                            results.append({
                                "file": os.path.basename(file_path),
                                "error": data.get('error'),
                                "success": False
                            })
                    else:
                        print(f"   ‚ùå {os.path.basename(file_path)}: HTTP {response.status_code}")
                        results.append({
                            "file": os.path.basename(file_path),
                            "error": f"HTTP {response.status_code}",
                            "success": False
                        })
                        
                except Exception as e:
                    print(f"   ‚ùå {os.path.basename(file_path)}: {str(e)}")
                    results.append({
                        "file": os.path.basename(file_path),
                        "error": str(e),
                        "success": False
                    })
        
        return {"success": len(results) > 0, "results": results}
    
    def test_url_recognition(self) -> Dict[str, Any]:
        """ÊµãËØïURLËØÜÂà´"""
        print("\nüåê ÊµãËØïURLËØÜÂà´...")
        
        # ÊµãËØïURL
        test_url = "https://ts1.tc.mm.bing.net/th/id/R-C.3aba72e96a9d1c073deda349b83f0f5b?rik=gS9sJR0bF5TGAA&riu=http%3a%2f%2fimg-03.proxy.5ce.com%2fview%2fimage%3f%26type%3d2%26guid%3de4e5833c-cf2f-eb11-8da9-e4434bdf6706%26url%3dhttps%3a%2f%2fpic3.zhimg.com%2fv2-17a03b9627aa8f850628c14550a0544a_b.jpg&ehk=4%2bX2KfJFsAZXJ1J1WbafyCUJaWS5Fy0fnQHlahF1gxg%3d&risl=&pid=ImgRaw&r=0"
        
        try:
            payload = {"url": test_url}
            
            start_time = time.time()
            response = self.session.post(
                f"{self.base_url}/api/digit/recognize/url",
                json=payload,
                timeout=60
            )
            request_time = round((time.time() - start_time) * 1000, 2)
            
            if response.status_code == 200:
                data = response.json()
                if data.get("success"):
                    print(f"   ‚úÖ URLËØÜÂà´ÊàêÂäü: '{data.get('result')}' ({request_time}ms)")
                    return {"success": True, "result": data.get('result')}
                else:
                    print(f"   ‚ùå URLËØÜÂà´Â§±Ë¥•: {data.get('error')}")
                    return {"success": False, "error": data.get('error')}
            else:
                print(f"   ‚ùå URLËØÜÂà´Â§±Ë¥•: HTTP {response.status_code}")
                return {"success": False, "error": f"HTTP {response.status_code}"}
                
        except Exception as e:
            print(f"   ‚ùå URLËØÜÂà´ÂºÇÂ∏∏: {str(e)}")
            return {"success": False, "error": str(e)}


def main():
    """‰∏ªÊµãËØïÂáΩÊï∞"""
    print("üöÄ ÂàÜÁ±ªÂûãÈ™åËØÅÁ†ÅËØÜÂà´APIÊµãËØï")
    print("=" * 60)
    
    # ÂàõÂª∫ÊµãËØïÂô®
    tester = TypedAPITester()
    
    results = {}
    
    # 1. ÂÅ•Â∫∑Ê£ÄÊü•ÊµãËØï
    results['health'] = tester.test_health()
    
    # 2. Á∫ØÊï∞Â≠óÈ™åËØÅÁ†ÅÊµãËØï
    results['digit'] = tester.test_digit_recognition()
    
    # 3. Êï∞Â≠óÂ≠óÊØçÊ∑∑ÂêàÊµãËØï
    results['mixed'] = tester.test_mixed_recognition()
    
    # 4. Ëá™Âä®Á±ªÂûãËØÜÂà´ÊµãËØï
    results['auto'] = tester.test_auto_recognition()
    
    # 5. URLËØÜÂà´ÊµãËØï
    results['url'] = tester.test_url_recognition()
    
    # ÊµãËØïÁªìÊûúÊ±áÊÄª
    print("\n" + "="*60)
    print("üìä ÊµãËØïÁªìÊûúÊ±áÊÄª:")
    print("="*60)
    
    success_count = 0
    total_count = 0
    
    for test_name, result in results.items():
        total_count += 1
        if result.get('success'):
            success_count += 1
            print(f"‚úÖ {test_name}: ÊàêÂäü")
        else:
            print(f"‚ùå {test_name}: Â§±Ë¥• - {result.get('error', 'Êú™Áü•ÈîôËØØ')}")
    
    print(f"\nüéØ ÊÄª‰ΩìÊàêÂäüÁéá: {success_count}/{total_count} ({success_count/total_count*100:.1f}%)")
    
    if success_count == total_count:
        print("üéâ ÊâÄÊúâÊµãËØïÈÄöËøáÔºÅÂàÜÁ±ªÂûãAPIÂäüËÉΩÂÆåÂÖ®Ê≠£Â∏∏ÔºÅ")
    else:
        print("‚ö†Ô∏è ÈÉ®ÂàÜÊµãËØïÂ§±Ë¥•ÔºåËØ∑Ê£ÄÊü•APIÊúçÂä°Áä∂ÊÄÅ")
    
    # ËØ¶ÁªÜÁªìÊûúÂàÜÊûê
    print(f"\nüìã ËØ¶ÁªÜÁªìÊûúÂàÜÊûê:")
    print("-" * 40)
    
    if results.get('auto', {}).get('success'):
        auto_results = results['auto']['results']
        type_accuracy = sum(1 for r in auto_results if r.get('type_correct', False)) / len(auto_results) * 100
        print(f"ü§ñ Ëá™Âä®Á±ªÂûãËØÜÂà´ÂáÜÁ°ÆÁéá: {type_accuracy:.1f}%")
    
    if results.get('digit', {}).get('success'):
        digit_results = results['digit']['results']
        digit_success = sum(1 for r in digit_results if r.get('success', False))
        print(f"üî¢ Êï∞Â≠óÈ™åËØÅÁ†ÅËØÜÂà´ÊàêÂäüÁéá: {digit_success}/{len(digit_results)}")
    
    if results.get('mixed', {}).get('success'):
        mixed_results = results['mixed']['results']
        mixed_success = sum(1 for r in mixed_results if r.get('success', False))
        print(f"üî§ Ê∑∑ÂêàÈ™åËØÅÁ†ÅËØÜÂà´ÊàêÂäüÁéá: {mixed_success}/{len(mixed_results)}")


if __name__ == "__main__":
    main()
